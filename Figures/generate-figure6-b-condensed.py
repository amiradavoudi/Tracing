import matplotlib.pyplot as plt
import numpy as np
import random

'''
To facilitate the quick generation of Figure6(b), we provide this file *generate-figure6-b-condensed.py*, which takes
the precomputed average success rates as input and generates the figure. 
'''

def if_int(num_):
    rem = num_ - int(num_)
    if rem == 0:
        return True


def generate_flat_rand_num(low_val, high_val):
    num_ = round(random.uniform(low_val, high_val), 2)
    if low_val != high_val:
        while(if_int(num_)):
            num_ = round(random.uniform(low_val, high_val), 2)
        return num_
    else:
        return num_


'''
The precomputed average success rates are stored in the list, namely list_of_list_of_avg_success_rates.
'''

list_of_list_of_avg_success_rates = [[0.43, 0.71, 0.57, 0.33, 0.69, 0.59, 0.74, 0.44, 0.44, 0.35, 0.62, 0.42, 0.38, 0.37, 0.39, 0.74, 0.78, 0.69, 0.8, 0.53, 0.26, 0.53, 0.55, 0.22, 0.32, 0.7, 0.24, 0.3, 0.59, 0.72, 0.58, 0.63, 0.5, 0.43, 0.6, 0.47, 0.23, 0.36, 0.67, 0.65, 0.46, 0.63, 0.2, 0.79, 0.44, 0.57, 0.63, 0.49, 0.41, 0.27], [0.75, 0.36, 0.4, 1.31, 0.93, 0.23, 0.38, 0.41, 0.68, 0.75, 0.47, 0.46, 0.61, 0.72, 0.41, 0.67, 0.4, 0.45, 1.46, 0.71, 0.33, 0.6, 0.54, 0.72, 0.45, 0.68, 0.24, 0.55, 0.45, 0.21, 0.48, 0.99, 1.07, 3.56, 1.39, 0.82, 0.49, 0.33, 0.58, 0.64, 0.43, 0.39, 0.21, 0.16, 0.73, 0.29, 0.61, 0.24, 0.5, 0.65], [1.35, 1.55, 9.23, 6.08, 0.71, 1.43, 1.59, 3.78, 4.69, 2.08, 1.98, 3.05, 3.18, 1.77, 3.1, 1.77, 3.17, 14.83, 3.91, 1.23, 2.92, 2.27, 3.54, 2.57, 3.58, 0.79, 2.76, 1.92, 0.61, 2.09, 7.14, 7.56, 11.98, 11.44, 5.14, 2.25, 1.32, 3.94, 3.37, 1.75, 1.45, 0.56, 0.48, 4.15, 1.01, 3.0, 0.71, 1.62, 3.95, 4.97], [4.24, 26.74, 23.83, 1.66, 4.08, 4.62, 14.72, 16.8, 5.86, 7.24, 10.48, 8.78, 5.86, 10.75, 5.26, 10.84, 34.6, 14.03, 2.81, 9.66, 7.61, 12.03, 5.17, 9.84, 2.0, 9.14, 5.86, 1.55, 6.13, 22.74, 25.0, 31.94, 33.23, 16.63, 7.11, 3.81, 7.75, 13.25, 4.89, 4.06, 1.22, 0.91, 14.36, 2.77, 9.35, 1.6, 7.93, 12.71, 17.35, 37.28], [44.64, 40.43, 3.67, 9.52, 9.37, 29.43, 32.48, 17.55, 16.15, 23.19, 18.38, 12.62, 21.43, 13.92, 23.93, 59.8, 30.56, 10.68, 20.33, 18.19, 25.75, 11.09, 25.46, 4.23, 24.3, 13.85, 2.64, 14.19, 42.36, 46.11, 55.51, 56.18, 35.38, 17.64, 9.61, 19.72, 26.94, 10.66, 9.0, 2.22, 1.7, 28.05, 5.63, 20.93, 2.85, 20.39, 26.13, 33.06, 61.59, 30.01], [61.16, 5.83, 17.52, 15.52, 43.94, 49.51, 24.39, 25.78, 37.55, 29.03, 23.77, 34.83, 26.83, 41.11, 70.78, 46.72, 18.63, 32.07, 28.44, 38.68, 18.37, 40.51, 9.1, 34.91, 24.42, 4.93, 24.86, 58.31, 63.89, 67.71, 74.24, 49.46, 29.89, 19.0, 30.76, 42.56, 22.27, 15.53, 3.68, 3.02, 18.13, 12.58, 36.35, 5.47, 30.2, 39.69, 49.22, 76.6, 46.69, 38.07], [9.88, 33.72, 25.52, 61.28, 68.57, 34.89, 36.43, 54.27, 39.08, 36.0, 46.23, 39.0, 53.36, 60.03, 63.0, 28.84, 46.64, 43.13, 51.48, 29.52, 47.23, 16.34, 49.46, 35.98, 7.84, 38.02, 69.65, 76.4, 75.65, 86.9, 67.63, 43.49, 29.48, 43.36, 68.21, 30.66, 28.25, 6.06, 4.7, 58.87, 18.62, 46.92, 7.99, 43.08, 54.48, 51.62, 90.11, 63.61, 55.11, 73.86], [43.31, 33.96, 61.96, 70.77, 56.19, 52.02, 65.37, 35.3, 47.07, 59.52, 53.05, 69.37, 83.53, 76.28, 35.04, 55.96, 53.73, 69.31, 40.42, 67.67, 22.75, 61.48, 45.47, 12.57, 50.57, 76.15, 93.0, 82.23, 94.67, 78.25, 47.63, 40.51, 50.33, 62.0, 40.87, 34.12, 11.63, 8.33, 65.56, 26.44, 51.9, 12.3, 56.98, 72.14, 74.37, 96.01, 75.43, 66.97, 81.66, 50.09], [43.5, 78.96, 89.18, 56.95, 57.98, 71.07, 54.13, 57.47, 71.81, 65.5, 80.44, 90.06, 85.17, 45.28, 69.9, 63.51, 63.03, 45.71, 76.85, 30.76, 75.85, 59.4, 17.64, 55.96, 74.38, 86.89, 85.22, 94.61, 86.18, 58.81, 53.09, 63.22, 85.33, 46.73, 41.88, 12.45, 11.07, 80.64, 35.48, 72.69, 16.07, 67.1, 82.11, 77.49, 99.17, 85.52, 73.46, 79.72, 60.38, 68.76], [91.82, 85.14, 66.22, 67.63, 79.18, 69.59, 66.37, 77.6, 70.81, 72.85, 90.57, 91.0, 52.28, 76.39, 74.12, 86.23, 56.14, 73.07, 39.4, 82.71, 68.36, 21.78, 63.22, 84.06, 96.21, 86.25, 97.27, 94.52, 78.51, 64.29, 72.03, 91.33, 49.73, 50.3, 16.58, 15.84, 78.69, 43.83, 79.73, 22.84, 79.99, 84.42, 86.7, 99.33, 93.2, 67.76, 90.77, 68.6, 72.02, 72.75]]
list_of_upper_bound_prices = []
for i in range(1, 11):
    list_of_upper_bound_prices.append(i)

'''
Draw the graph
'''
list_format_upper_bound_price = []
for upper_bound_price in list_of_upper_bound_prices:
    a = [1, upper_bound_price]
    list_format_upper_bound_price.append(str(a))

len_list_of_upper_bound_prices = len(list_of_upper_bound_prices)
label = []

for i in range(len_list_of_upper_bound_prices):
    label.append(i + 1)

fig, ax = plt.subplots()
plt.gcf().subplots_adjust(bottom=0.17)
bp = ax.boxplot(list_of_list_of_avg_success_rates, patch_artist=True)
plt.xticks(label, list_format_upper_bound_price, rotation=45)
plt.xlabel("Range of toll prices (in dollar)")

labels2 = np.arange(0, 101, 10)
plt.ylim(0, 102)
plt.yticks(labels2, labels2)
plt.ylabel("Average success rate (%)")
plt.grid()


for median in bp['medians']:
    median.set(color='red',
               linewidth=2)

for whisker in bp['whiskers']:
    whisker.set(color='#8B008B',
                linewidth=1.5,
                )

col = '#caff91'
colors = []
for i in range(len_list_of_upper_bound_prices):
    colors.append(col)

for patch, color in zip(bp['boxes'], colors):
    patch.set_facecolor(color)

plt.savefig("figure6-b.pdf", format="pdf", bbox_inches="tight")
plt.show()
